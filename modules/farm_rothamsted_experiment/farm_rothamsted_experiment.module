<?php

/**
 * @file
 * Contains farm_rothamsted_experiment.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\asset\Entity\AssetInterface;
use Drupal\Core\Link;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\plan\Entity\Plan;
use Drupal\plan\Entity\PlanInterface;

/**
 * Implements hook_help().
 */
function farm_rothamsted_experiment_help($route_name, RouteMatchInterface $route_match) {
  $output = [];

  // All routes that are plan log pages.
  if (strpos($route_name, 'view.rothamsted_experiment_plan_logs.') === 0) {

    // Default values for plan log help text.
    $title = t('Help');
    $description = NULL;
    $asset_list = TRUE;
    $plot_link = TRUE;

    // Customize help text for each log view.
    switch ($route_name) {
      case 'view.rothamsted_experiment_plan_logs.page':
        $title = t('All logs associated with this experiment');
        $description = t('This page includes all logs referencing plots or other assets associated with this experiment.');
        break;

      case 'view.rothamsted_experiment_plan_logs.page_plot':
        $title = t('Logs referencing plots');
        $description = t("This page includes logs that reference the experiment plots.");
        $asset_list = FALSE;
        break;

      case 'view.rothamsted_experiment_plan_logs.page_asset':
        $title = t('Logs referencing other experiment assets');
        $description = t('This page includes logs that reference other assets associated with this experiment.');
        $plot_link = FALSE;
        break;
    }

    // Start details element with list of things to link to.
    $details = [
      '#type' => 'details',
      '#title' => $title,
      '#description' => $description,
    ];
    $details['list'] = [
      '#theme' => 'item_list',
      '#list_type' => 'ul',
      '#items' => [],
    ];

    // Get the plan.
    $plan = $route_match->getParameter('plan');
    if (!$plan instanceof PlanInterface) {
      $plan = Plan::load($plan);
    }

    // Add link to plots page.
    if ($plot_link) {
      $plot_url = Url::fromRoute('view.rothamsted_experiment_plan_plots.page', ['plan' => $plan->id()]);
      $link = Link::fromTextAndUrl(t('Plots'), $plot_url);
      $details['list']['#items'][] = $link->toRenderable();
    }

    // Add asset list.
    if ($asset_list) {
      $assets = $plan->get('asset')->referencedEntities();
      $labels = array_map(function (AssetInterface $asset) {
        return $asset->toLink()->toRenderable();
      }, $assets);
      array_push($details['list']['#items'], ...$labels);
    }

    $output['details'] = $details;
  }

  return $output;
}

/**
 * Implements hook_theme_registry_alter().
 */
function farm_rothamsted_experiment_theme_registry_alter(&$theme_registry) {

  // Do not use the two column layout on plans.
  if (isset($theme_registry['plan__full']['preprocess functions'])) {
    $theme_registry['plan__full']['preprocess functions'] = array_filter($theme_registry['plan__full']['preprocess functions'], fn ($f) => $f != 'farm_ui_theme_preprocess_plan__full');
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function farm_rothamsted_experiment_plan_access(EntityInterface $entity, $operation, AccountInterface $account) {

  // Only check experiment plans.
  if ($entity->bundle() != 'rothamsted_experiment') {
    return AccessResult::neutral();
  }

  // Only check update and delete operations.
  if (!in_array($operation, ['update', 'delete'])) {
    return AccessResult::neutral();
  }

  // Delegate to helper function.
  return farm_rothamsted_experiment_plan_account_access($entity, $account);
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function farm_rothamsted_experiment_asset_access(EntityInterface $entity, $operation, AccountInterface $account) {

  // Only check plot assets.
  if ($entity->bundle() != 'plot') {
    return AccessResult::neutral();
  }

  // Only check update and delete operations.
  if (!in_array($operation, ['update', 'delete'])) {
    return AccessResult::neutral();
  }

  // Find the plan associated with the plot.
  $plans = \Drupal::entityTypeManager()->getStorage('plan')->loadByProperties([
    'plot' => $entity->id(),
  ]);

  // Don't check if the plot is not associated with a plan.
  if (empty($plans)) {
    return AccessResult::neutral();
  }

  // Delegate to helper function.
  $plan = reset($plans);
  return farm_rothamsted_experiment_plan_account_access($plan, $account)
    ->addCacheableDependency($entity);
}

/**
 * Helper function to determine if an account has access to edit a plan.
 *
 * @param \Drupal\plan\Entity\PlanInterface $plan
 *   The plan.
 * @param \Drupal\Core\Session\AccountInterface $account
 *   The account.
 *
 * @return \Drupal\Core\Access\AccessResult
 *   The access result.
 */
function farm_rothamsted_experiment_plan_account_access(PlanInterface $plan, AccountInterface $account) {

  // Allow users to update the plan if they are listed as a contact
  // or if they are an experiment admin.
  // We cannot use the access result's and/or logic to combine access results
  // so check for each case and separately return an access result.

  // Allow access if the user is an experiment admin.
  if ($account->hasPermission('administer rothamsted_experiment plan')) {
    return AccessResult::allowedIfHasPermission($account, 'administer rothamsted_experiment plan');
  }

  // Allow access if the user is an experiment contact.
  $experiment_contacts_id = array_column($plan->get('contact')->getValue(), 'target_id') ?? [];
  return AccessResult::forbiddenIf(!in_array($account->id(), $experiment_contacts_id))
    ->addCacheableDependency($plan);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function farm_rothamsted_experiment_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Load form state storage and bail if the View is not stored.
  $storage = $form_state->getStorage();
  if (empty($storage['view'])) {
    return;
  }

  // We only want to alter the Views we provide.
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $storage['view'];
  if ($view->id() == 'rothamsted_experiment_plan_plots' && $view->current_display != 'page') {

    // Add column descriptors fieldset.
    $form['column_descriptors'] = [
      '#type' => 'fieldset',
      '#title' => t('Column descriptors'),
      '#attached' => [
        'library' => ['farm_rothamsted_experiment/column_descriptors_filters'],
      ],
    ];

    // Move column_descriptor fields to the wrapper.
    // Using #group in the exposed filters does not seem to work.
    foreach ($form as $field_name => $field_value) {
      if (is_array($field_value) && isset($field_value['#group']) && $field_value['#group'] == 'column_descriptors') {
        $form['column_descriptors'][$field_name] = $field_value;
        unset($form[$field_name]);
      }
    }
  }

  // Alter flag filter for experiment plans view.
  if ($view->id() == 'rothamsted_experiment_plans') {

    // If there is no exposed filter for flags, bail.
    if (empty($form['flag_value'])) {
      return;
    }

    // Rewrite flag options.
    $allowed_options = farm_flag_options('plan', ['rothamsted_experiment'], TRUE);
    $form['flag_value']['#options'] = $allowed_options;
  }
}

/**
 * Plot type options helper.
 *
 * @return array
 *   Returns an array of plot types.
 */
function farm_rothamsted_experiment_plot_type_options() {
  return [
    'baseline' => t('Baseline'),
    'blank' => t('Blank plot'),
    'calibration' => t('Calibration plot'),
    'discontinued' => t('Discontinued plot'),
    'guard' => t('Guard plot'),
    'observation' => t('Observation plot'),
    'seed_multiplication' => t('Seed multiplication'),
    'treated' => t('Treated plot'),
  ];
}

/**
 * Allowed values callback function for the plot type field.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the allowed values can be cached. Defaults to TRUE.
 *
 * @return array
 *   Returns an array of allowed values for use in form select options.
 */
function farm_rothamsted_experiment_plot_type_field_allowed_values(FieldStorageDefinitionInterface $definition, ContentEntityInterface $entity = NULL, bool &$cacheable = TRUE) {
  return farm_rothamsted_experiment_plot_type_options();
}
