<?php

/**
 * @file
 * Contains farm_rothamsted_experiment.module.
 */

use Drupal\asset\Entity\AssetInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\plan\Entity\Plan;
use Drupal\plan\Entity\PlanInterface;

/**
 * Implements hook_help().
 */
function farm_rothamsted_experiment_help($route_name, RouteMatchInterface $route_match) {
  $output = [];

  // All routes that are plan log pages.
  if (strpos($route_name, 'view.rothamsted_experiment_plan_logs.') === 0) {

    // Default values for plan log help text.
    $title = t('Help');
    $description = NULL;
    $asset_list = TRUE;
    $plot_link = TRUE;

    // Customize help text for each log view.
    switch ($route_name) {
      case 'view.rothamsted_experiment_plan_logs.page':
        $title = t('All logs associated with this experiment');
        $description = t('This page includes all logs referencing plots or other assets associated with this experiment.');
        break;

      case 'view.rothamsted_experiment_plan_logs.page_plot':
        $title = t('Logs referencing plots');
        $description = t("This page includes logs that reference the experiment plots.");
        $asset_list = FALSE;
        break;

      case 'view.rothamsted_experiment_plan_logs.page_asset':
        $title = t('Logs referencing other experiment assets');
        $description = t('This page includes logs that reference other assets associated with this experiment.');
        $plot_link = FALSE;
        break;
    }

    // Start details element with list of things to link to.
    $details = [
      '#type' => 'details',
      '#title' => $title,
      '#description' => $description,
    ];
    $details['list'] = [
      '#theme' => 'item_list',
      '#list_type' => 'ul',
      '#items' => [],
    ];

    // Get the plan.
    $plan = $route_match->getParameter('plan');
    if (!$plan instanceof PlanInterface) {
      $plan = Plan::load($plan);
    }

    // Add link to plots page.
    if ($plot_link) {
      $plot_url = Url::fromRoute('view.rothamsted_experiment_plan_plots.page', ['plan' => $plan->id()]);
      $link = Link::fromTextAndUrl(t('Plots'), $plot_url);
      $details['list']['#items'][] = $link->toRenderable();
    }

    // Add asset list.
    if ($asset_list) {
      $assets = $plan->get('asset')->referencedEntities();
      $labels = array_map(function (AssetInterface $asset) {
        return $asset->toLink()->toRenderable();
      }, $assets);
      array_push($details['list']['#items'], ...$labels);
    }

    $output['details'] = $details;
  }

  return $output;
}

/**
 * Implements hook_theme_registry_alter().
 */
function farm_rothamsted_experiment_theme_registry_alter(&$theme_registry) {

  // Do not use the two column layout on plans.
  if (isset($theme_registry['plan__full']['preprocess functions'])) {
    $theme_registry['plan__full']['preprocess functions'] = array_filter($theme_registry['plan__full']['preprocess functions'], fn ($f) => $f != 'farm_ui_theme_preprocess_plan__full');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function farm_rothamsted_experiment_form_plan_rothamsted_experiment_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Alter the name title and description.
  if (isset($form['name']['widget'][0])) {
    $form['name']['widget'][0]['#after_build'][] = 'farm_rothamsted_experiment_alter_plan_name';
  }
}

/**
 * Preprocess function to change the name field title and description.
 *
 * @param array $element
 *   The element to alter.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @return array
 *   The element.
 */
function farm_rothamsted_experiment_alter_plan_name(array $element, FormStateInterface $form_state) {
  $element['value']['#title'] = t('Study Name');
  $element['value']['#description'] = t('The name of the study.');
  return $element;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function farm_rothamsted_experiment_plan_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {

  $boundary = NULL;
  /** @var \Drupal\asset\Entity\AssetInterface[] $plan_assets */
  $plan_assets = $entity->get('asset')->referencedEntities();
  foreach ($plan_assets as $plan_asset) {
    if ($plan_asset->bundle() == 'land' && $plan_asset->get('land_type')->value == 'experiment_boundary') {
      $boundary = $plan_asset;
      break;
    }
  }

  // Ensure experiment boundary exists.
  if (empty($boundary)) {
    $url = Url::fromRoute('farm_rothamsted_experiment.experiment_boundary_form', ['plan' => $entity->id()])->setAbsolute()->toString();
    \Drupal::messenger()->addWarning(t('No experiment boundary has been created. <a href=":link">Create experiment boundary</a>', [':link' => $url]));
  }

  $has_plots = !$entity->get('plot')->isEmpty();
  if (!$has_plots) {
    $url = Url::fromRoute('farm_rothamsted_experiment.experiment_plot_form', ['plan' => $entity->id()])->setAbsolute()->toString();
    \Drupal::messenger()->addWarning(t('No experiment plots have been been created. <a href=":link">Create experiment plots</a>', [':link' => $url]));
  }

}

/**
 * Implements hook_entity_type_build().
 */
function farm_rothamsted_experiment_entity_type_build(array &$entity_types) {
  // Override the asset local task provider.
  $asset_local_task_provider = ['default' => 'Drupal\farm_rothamsted_experiment\Menu\RothamstedTaskProvider'];
  $entity_types['plan']->setHandlerClass('local_task_provider', $asset_local_task_provider);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function farm_rothamsted_experiment_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Load form state storage and bail if the View is not stored.
  $storage = $form_state->getStorage();
  if (empty($storage['view'])) {
    return;
  }

  // We only want to alter the Views we provide.
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $storage['view'];
  if ($view->id() == 'rothamsted_experiment_plan_plots' && $view->current_display != 'page') {

    // Add column descriptors fieldset.
    $form['column_descriptors'] = [
      '#type' => 'fieldset',
      '#title' => t('Column descriptors'),
      '#attached' => [
        'library' => ['farm_rothamsted_experiment/column_descriptors_filters'],
      ],
    ];

    // Move column_descriptor fields to the wrapper.
    // Using #group in the exposed filters does not seem to work.
    foreach ($form as $field_name => $field_value) {
      if (is_array($field_value) && isset($field_value['#group']) && $field_value['#group'] == 'column_descriptors') {
        $form['column_descriptors'][$field_name] = $field_value;
        unset($form[$field_name]);
      }
    }
  }

  // Alter flag filter for experiment plans view.
  if ($view->id() == 'rothamsted_experiment_plans') {

    // If there is no exposed filter for flags, bail.
    if (empty($form['flag_value'])) {
      return;
    }

    // Rewrite flag options.
    $allowed_options = farm_flag_options('plan', ['rothamsted_experiment'], TRUE);
    $form['flag_value']['#options'] = $allowed_options;
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function farm_rothamsted_experiment_plan_insert(PlanInterface $plan) {

  // Only notify for experiment plans.
  if ($plan->bundle() != 'rothamsted_experiment') {
    return;
  }

  // Only notify if notification module is enabled.
  if (!\Drupal::moduleHandler()->moduleExists('farm_rothamsted_notification')) {
    return;
  }

  // Build params.
  $params = [
    'highlight_fields' => [
      'name',
      'status',
      'abbreviation',
      'experiment_design',
      'experiment_code',
      'cost_code',
    ],
  ];
  farm_rothamsted_notification_send_research_update('entity_create', $plan, [], $params);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function farm_rothamsted_experiment_plan_update(PlanInterface $plan) {

  // Only notify for experiment plans.
  if ($plan->bundle() != 'rothamsted_experiment') {
    return;
  }

  // Only notify if notification module is enabled.
  if (!\Drupal::moduleHandler()->moduleExists('farm_rothamsted_notification')) {
    return;
  }

  farm_rothamsted_notification_send_research_update('entity_update', $plan);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function farm_rothamsted_experiment_plan_delete(PlanInterface $plan) {

  // Only notify for experiment plans.
  if ($plan->bundle() != 'rothamsted_experiment') {
    return;
  }

  // Only notify if notification module is enabled.
  if (!\Drupal::moduleHandler()->moduleExists('farm_rothamsted_notification')) {
    return;
  }

  farm_rothamsted_notification_send_research_update('entity_delete', $plan);
}

/**
 * Plot type options helper.
 *
 * @return array
 *   Returns an array of plot types.
 */
function farm_rothamsted_experiment_plot_type_options() {
  return [
    'baseline' => t('Baseline'),
    'blank' => t('Blank plot'),
    'calibration' => t('Calibration plot'),
    'discontinued' => t('Discontinued plot'),
    'guard' => t('Guard plot'),
    'observation' => t('Observation plot'),
    'seed_multiplication' => t('Seed multiplication'),
    'treated' => t('Treated plot'),
    'undefined' => t('Undefined'),
  ];
}

/**
 * Allowed values callback function for the plot type field.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the allowed values can be cached. Defaults to TRUE.
 *
 * @return array
 *   Returns an array of allowed values for use in form select options.
 */
function farm_rothamsted_experiment_plot_type_field_allowed_values(FieldStorageDefinitionInterface $definition, ContentEntityInterface $entity = NULL, bool &$cacheable = TRUE) {
  return farm_rothamsted_experiment_plot_type_options();
}
