<?php

/**
 * @file
 * Contains farm_rothamsted_experiment.module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme_registry_alter().
 */
function farm_rothamsted_experiment_theme_registry_alter(&$theme_registry) {

  // Do not use the two column layout on plans.
  if (isset($theme_registry['plan__full']['preprocess functions'])) {
    $theme_registry['plan__full']['preprocess functions'] = array_filter($theme_registry['plan__full']['preprocess functions'], fn ($f) => $f != 'farm_ui_theme_preprocess_plan__full');
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function farm_rothamsted_experiment_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Load form state storage and bail if the View is not stored.
  $storage = $form_state->getStorage();
  if (empty($storage['view'])) {
    return;
  }

  // We only want to alter the Views we provide.
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $storage['view'];
  if ($view->id() !== 'rothamsted_experiment_plan_plots' || $view->current_display != 'page') {
    return;
  }

  // Add column descriptors fieldset.
  $form['column_descriptors'] = [
    '#type' => 'fieldset',
    '#title' => t('Column descriptors'),
    '#attached' => [
      'library' => ['farm_rothamsted_experiment/column_descriptors_filters'],
    ],
  ];

  // Move column_descriptor fields to the wrapper.
  // Using #group in the exposed filters does not seem to work.
  foreach ($form as $field_name => $field_value) {
    if (is_array($field_value) && isset($field_value['#group']) && $field_value['#group'] == 'column_descriptors') {
      $form['column_descriptors'][$field_name] = $field_value;
      unset($form[$field_name]);
    }
  }
}

/**
 * Plot type options helper.
 *
 * @return array
 *   Returns an array of plot types.
 */
function farm_rothamsted_experiment_plot_type_options() {
  return [
    'baseline' => t('Baseline'),
    'blank' => t('Blank plot'),
    'discontinued' => t('Discontinued plot'),
    'guard' => t('Guard plot'),
    'observation' => t('Observation plot'),
    'seed_multiplication' => t('Seed multiplication'),
    'treated' => t('Treated plot'),
  ];
}

/**
 * Allowed values callback function for the plot type field.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the allowed values can be cached. Defaults to TRUE.
 *
 * @return array
 *   Returns an array of allowed values for use in form select options.
 */
function farm_rothamsted_experiment_plot_type_field_allowed_values(FieldStorageDefinitionInterface $definition, ContentEntityInterface $entity = NULL, bool &$cacheable = TRUE) {
  return farm_rothamsted_experiment_plot_type_options();
}
