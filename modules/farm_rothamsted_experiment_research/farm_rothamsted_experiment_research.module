<?php

/**
 * @file
 * The farm rothamsted experiment research module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\entity\BundleFieldDefinition;

/**
 * Implements hook_farm_entity_bundle_field_info().
 */
function farm_rothamsted_experiment_research_farm_entity_bundle_field_info(EntityTypeInterface $entity_type, string $bundle) {
  $fields = [];

  // Add an Equipment reference field to logs.
  if ($entity_type->id() == 'plan' && $bundle == 'rothamsted_experiment') {

    // Reference to the experiment design.
    $fields['experiment_design'] = BundleFieldDefinition::create('entity_reference')
      ->setLabel(t('Experiment Design'))
      ->setRevisionable(TRUE)
      ->setRequired(TRUE)
      ->setSetting('target_type', 'rothamsted_design')
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'entity_reference_autocomplete',
        'settings' => [
          'match_operator' => 'CONTAINS',
          'size' => 60,
          'placeholder' => '',
        ],
        'weight' => -100,
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', [
        'label' => 'inline',
        'type' => 'entity_reference_label',
        'weight' => -100,
      ]);
  }

  return $fields;
}

/**
 * Implements hook_entity_insert().
 */
function farm_rothamsted_experiment_research_entity_insert(EntityInterface $entity) {

  // Only send emails for these entity types.
  $rothamsted_entity_type_ids = [
    'rothamsted_design',
    'rothamsted_experiment',
    'rothamsted_program',
    'rothamsted_researcher',
  ];
  $entity_type_id = $entity->getEntityTypeId();
  if (!in_array($entity_type_id, $rothamsted_entity_type_ids)) {
    return;
  }

  $highlight_fields = [
    'rothamsted_program' => [
      'name',
      'abbreviation',
      'project_code',
      'principal_investigators',
      'start',
      'end',
    ],
    'rothamsted_experiment' => [
      'name',
      'program',
      'code',
      'description',
      'researcher',
      'start',
      'end',
    ],
    'rothamsted_design' => [
      'name',
      'experiment',
      'design_type',
      'statistician',
    ],
    'rothamsted_researcher' => [
      'name',
      'role',
      'organization',
      'department',
    ],
  ];

  // Build params.
  $params = [
    'highlight_fields' => $highlight_fields[$entity_type_id],
  ];
  farm_rothamsted_notification_send_research_update('entity_create', $entity, [], $params);
}

/**
 * Implements hook_entity_update().
 */
function farm_rothamsted_experiment_research_entity_update(EntityInterface $entity) {

  // Only send emails for these entity types.
  $rothamsted_entity_type_ids = [
    'rothamsted_design',
    'rothamsted_experiment',
    'rothamsted_program',
    'rothamsted_researcher',
  ];
  $entity_type_id = $entity->getEntityTypeId();
  if (!in_array($entity_type_id, $rothamsted_entity_type_ids)) {
    return;
  }
  farm_rothamsted_notification_send_research_update('entity_update', $entity);
}

/**
 * Implements hook_entity_delete().
 */
function farm_rothamsted_experiment_research_entity_delete(EntityInterface $entity) {

  // Only send emails for these entity types.
  $rothamsted_entity_type_ids = [
    'rothamsted_design',
    'rothamsted_experiment',
    'rothamsted_program',
    'rothamsted_researcher',
  ];
  $entity_type_id = $entity->getEntityTypeId();
  if (!in_array($entity_type_id, $rothamsted_entity_type_ids)) {
    return;
  }
  farm_rothamsted_notification_send_research_update('entity_delete', $entity);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function farm_rothamsted_experiment_research_preprocess_toolbar(&$variables) {
  $variables['#attached']['library'][] = 'farm_rothamsted_experiment_research/toolbar';
}
