<?php

/**
 * @file
 * The farm rothamsted experiment research module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\entity\BundleFieldDefinition;

/**
 * Implements hook_farm_entity_bundle_field_info().
 */
function farm_rothamsted_experiment_research_farm_entity_bundle_field_info(EntityTypeInterface $entity_type, string $bundle) {
  $fields = [];

  // Add an Equipment reference field to logs.
  if ($entity_type->id() == 'plan' && $bundle == 'rothamsted_experiment') {

    // Reference to the experiment design.
    $fields['experiment_design'] = BundleFieldDefinition::create('entity_reference')
      ->setLabel(t('Experiment Design'))
      ->setRevisionable(TRUE)
      ->setRequired(TRUE)
      ->setSetting('target_type', 'rothamsted_design')
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'entity_reference_autocomplete',
        'settings' => [
          'match_operator' => 'CONTAINS',
          'size' => 60,
          'placeholder' => '',
        ],
        'weight' => -100,
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', [
        'label' => 'inline',
        'type' => 'entity_reference_label',
        'weight' => -100,
      ]);
  }

  return $fields;
}

/**
 * Allowed values callback function for the design blocking structure.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field storage definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the allowed values can be cached. Defaults to TRUE.
 *
 * @return array
 *   Returns an array of allowed values for use in form select options.
 */
function farm_rothamsted_experiment_research_statistical_design_field_allowed_values(FieldStorageDefinitionInterface $definition, ContentEntityInterface $entity = NULL, bool &$cacheable = TRUE) {
  return farm_rothamsted_experiment_research_statistical_design_options();
}

/**
 * Helper function to get statistical design allowed options.
 *
 * @param string|null $blocking_structure
 *   The blocking structure used to determine statistical design options.
 *
 * @return array
 *   The statistical design allowed options.
 */
function farm_rothamsted_experiment_research_statistical_design_options(string $blocking_structure = NULL): array {
  $all_options = [
    'crd' => [
      'crd' => t('Completely Randomised Design'),
    ],
    'rcbd' => [
      'rcbd' => t('Randomised Complete Block Design'),
    ],
    'rbd' => [
      'bibd' => t('Balanced Incomplete Block Design'),
      'ubd' => t('Unequal Block Design'),
      'ad' => t('Alpha Design'),
      'cd' => t('Cyclic Design'),
    ],
    'nrbd' => [
      'ibd' => t('Incomplete Block Design'),
      'ad' => t('Alpha Design'),
      'cd' => t('Cyclic Design'),
    ],
    'rrcd' => [
      'ls' => t('Latin Square'),
      'cls' => t('Complete Latin Square'),
      'qcls' => t('Quasi-Complete Latin Square'),
      'lsd' => t('Lattice Square Design'),
    ],
    'nrrcd' => [
      'description' => t('See Description'),
    ],
    'spd' => [
      'spd' => t('Split Plot Design'),
      'smpd' => t('Split Main Plots Design'),
      'sspd' => t('Split-split Plot Design'),
      'ccd' => t('Criss-cross (Strip Plot) Design'),
    ],
    'ad' => [
      'description' => t('See Description'),
    ],
    'nr' => [
      'description' => t('See Description'),
    ],
    'other' => [
      'description' => t('See Description'),
    ],
  ];

  // Return all options.
  if (empty($blocking_structure)) {
    return array_unique(array_merge(...array_values($all_options)));
  }

  // Else return specific options.
  return $all_options[$blocking_structure] ?? [];
}

/**
 * Implements hook_entity_insert().
 */
function farm_rothamsted_experiment_research_entity_insert(EntityInterface $entity) {

  // Only send emails for these entity types.
  $rothamsted_entity_type_ids = [
    'rothamsted_design',
    'rothamsted_experiment',
    'rothamsted_program',
    'rothamsted_researcher',
  ];
  $entity_type_id = $entity->getEntityTypeId();
  if (!in_array($entity_type_id, $rothamsted_entity_type_ids)) {
    return;
  }

  $highlight_fields = [
    'rothamsted_program' => [
      'name',
      'abbreviation',
      'project_code',
      'principal_investigator',
      'start',
      'end',
    ],
    'rothamsted_experiment' => [
      'name',
      'program',
      'code',
      'description',
      'researcher',
      'start',
      'end',
    ],
    'rothamsted_design' => [
      'name',
      'experiment',
      'blocking_structure',
      'statistician',
    ],
    'rothamsted_researcher' => [
      'name',
      'role',
      'organization',
      'department',
    ],
  ];

  // Build params.
  $params = [
    'highlight_fields' => $highlight_fields[$entity_type_id],
  ];
  farm_rothamsted_notification_send_research_update('entity_create', $entity, [], $params);
}

/**
 * Implements hook_entity_update().
 */
function farm_rothamsted_experiment_research_entity_update(EntityInterface $entity) {

  // Only send emails for these entity types.
  $rothamsted_entity_type_ids = [
    'rothamsted_design',
    'rothamsted_experiment',
    'rothamsted_program',
    'rothamsted_researcher',
  ];
  $entity_type_id = $entity->getEntityTypeId();
  if (!in_array($entity_type_id, $rothamsted_entity_type_ids)) {
    return;
  }
  farm_rothamsted_notification_send_research_update('entity_update', $entity);
}

/**
 * Implements hook_entity_delete().
 */
function farm_rothamsted_experiment_research_entity_delete(EntityInterface $entity) {

  // Only send emails for these entity types.
  $rothamsted_entity_type_ids = [
    'rothamsted_design',
    'rothamsted_experiment',
    'rothamsted_program',
    'rothamsted_researcher',
  ];
  $entity_type_id = $entity->getEntityTypeId();
  if (!in_array($entity_type_id, $rothamsted_entity_type_ids)) {
    return;
  }
  farm_rothamsted_notification_send_research_update('entity_delete', $entity);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function farm_rothamsted_experiment_research_preprocess_toolbar(&$variables) {
  $variables['#attached']['library'][] = 'farm_rothamsted_experiment_research/toolbar';
}
