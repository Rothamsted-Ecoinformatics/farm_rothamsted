<?php

/**
 * @file
 * The farm rothamsted experiment research module.
 */

use Drupal\comment\CommentInterface;
use Drupal\comment\Plugin\Field\FieldType\CommentItemInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\entity\BundleFieldDefinition;
use Drupal\farm_rothamsted_experiment_research\ResearchNotificationHandler;
use Drupal\farm_rothamsted_researcher\Entity\RothamstedResearcherInterface;

/**
 * Implements hook_farm_entity_bundle_field_info().
 */
function farm_rothamsted_experiment_research_farm_entity_bundle_field_info(EntityTypeInterface $entity_type, string $bundle) {
  $fields = [];

  // Add a design reference field to experiment plans.
  if ($entity_type->id() == 'plan' && $bundle == 'rothamsted_experiment') {

    // Reference to the experiment design.
    $fields['experiment_design'] = BundleFieldDefinition::create('entity_reference')
      ->setLabel(t('Experiment Design'))
      ->setRevisionable(TRUE)
      ->setRequired(TRUE)
      ->setSetting('target_type', 'rothamsted_design')
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'entity_reference_autocomplete',
        'settings' => [
          'match_operator' => 'CONTAINS',
          'size' => 60,
          'placeholder' => '',
        ],
        'weight' => -100,
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', [
        'label' => 'inline',
        'type' => 'entity_reference_label',
        'weight' => -100,
      ]);
  }

  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function farm_rothamsted_experiment_research_comment_insert(EntityInterface $entity) {
  if ($entity->bundle() == 'rothamsted_proposal' && $entity->get('proposal_review')->value) {
    farm_rothamsted_experiment_research_update_proposal_reviewer($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function farm_rothamsted_experiment_research_comment_update(EntityInterface $entity) {
  if ($entity->bundle() == 'rothamsted_proposal' && $entity->get('proposal_review')->value) {
    farm_rothamsted_experiment_research_update_proposal_reviewer($entity);
  }
}

/**
 * Helper function to update proposal reviewers for a comment.
 *
 * @param \Drupal\comment\CommentInterface $comment
 *   The comment entity.
 */
function farm_rothamsted_experiment_research_update_proposal_reviewer(CommentInterface $comment) {

  // Get matching researcher.
  $researcher = \Drupal::entityTypeManager()->getStorage('rothamsted_researcher')->loadByProperties([
    'farm_user' => $comment->getOwnerId(),
  ]);
  if (empty($researcher)) {
    return;
  }

  // Update the proposal.reviewer field.
  $proposal = $comment->getCommentedEntity();
  $reviewer_ids = array_column($proposal->get('reviewer')->getValue(), 'target_id');
  $reviewer_ids[] = reset($researcher)->id();
  $proposal->set('reviewer', array_unique($reviewer_ids));
  $proposal->save();
}

/**
 * Implements hook_entity_field_access().
 */
function farm_rothamsted_experiment_research_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  if ($operation == 'edit' && $field_definition->getTargetEntityTypeId() == 'comment' && $field_definition->getName() == 'proposal_review') {
    return AccessResult::forbiddenIf(!$account->hasPermission('review rothamsted_proposal'));
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_entity_access().
 */
function farm_rothamsted_experiment_research_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  $research_entity_types = [
    'rothamsted_proposal',
    'rothamsted_program',
    'rothamsted_experiment',
    'rothamsted_design',
  ];
  if (!in_array($entity->getEntityTypeId(), $research_entity_types)) {
    return AccessResult::neutral();
  }

  // Only check view, update and delete operations.
  if (!in_array($operation, ['view', 'update', 'delete'])) {
    return AccessResult::neutral();
  }

  // Delegate to helper function.
  return farm_rothamsted_experiment_research_research_entity_access($entity, $operation, $account);
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function farm_rothamsted_experiment_research_plan_access(EntityInterface $entity, $operation, AccountInterface $account) {

  // Only check experiment plans.
  if ($entity->bundle() != 'rothamsted_experiment') {
    return AccessResult::neutral();
  }

  // Only check view, update and delete operations.
  if (!in_array($operation, ['view', 'update', 'delete'])) {
    return AccessResult::neutral();
  }

  // Delegate to helper function.
  return farm_rothamsted_experiment_research_research_entity_access($entity, $operation, $account);
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function farm_rothamsted_experiment_research_asset_access(EntityInterface $entity, $operation, AccountInterface $account) {

  // Only check view, update and delete operations.
  if (!in_array($operation, ['view', 'update', 'delete'])) {
    return AccessResult::neutral();
  }

  // Delegate to helper function.
  return farm_rothamsted_experiment_research_research_entity_access($entity, $operation, $account);
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function farm_rothamsted_experiment_research_log_access(EntityInterface $entity, $operation, AccountInterface $account) {

  // Only check view, update and delete operations.
  if (!in_array($operation, ['view', 'update', 'delete'])) {
    return AccessResult::neutral();
  }

  // Delegate to helper function.
  return farm_rothamsted_experiment_research_research_entity_access($entity, $operation, $account);
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function farm_rothamsted_experiment_research_quantity_access(EntityInterface $entity, $operation, AccountInterface $account) {

  // Only check view, update and delete operations.
  if (!in_array($operation, ['view', 'update', 'delete'])) {
    return AccessResult::neutral();
  }

  // Delegate to helper function.
  return farm_rothamsted_experiment_research_research_entity_access($entity, $operation, $account);
}

/**
 * Helper function to determine account access to research entities.
 *
 * Access is granted if accounts are the experiment admin or if accounts are
 * associated with a researcher that is assigned to the experiment atop
 * the research hierarchy.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity to check.
 * @param \Drupal\Core\Session\AccountInterface $account
 *   The account.
 *
 * @return \Drupal\Core\Access\AccessResult
 *   The access result.
 */
function farm_rothamsted_experiment_research_research_entity_access(EntityInterface $entity, string $operation, AccountInterface $account): AccessResult {

  // Allow access if the user is an experiment admin.
  if ($account->hasPermission('administer rothamsted_experiment plan')) {
    return AccessResult::allowedIfHasPermission($account, 'administer rothamsted_experiment plan');
  }

  // Add cache tags to all other access results. This ensures that secondary
  // task items are rebuilt on the entity page when other entities change.
  // For example, if a researcher is removed from an Experiment entity,
  // the plan should be updated to not have the "edit" tab. Without these cache
  // tags the previous result can be cached.
  $research_entity_cache_tags = [
    'rothamsted_researcher_list',
    'rothamsted_proposal_list',
    'rothamsted_program_list',
    'rothamsted_experiment_list',
    'rothamsted_design_list',
    'plan_list:rothamsted_experiment',
  ];

  // Build the research_assigned permission string.
  $bundle_permissions = $entity->getEntityType()->getPermissionGranularity() == 'bundle';
  $assigned_research_permission = $bundle_permissions ? "$operation research_assigned {$entity->bundle()} {$entity->getEntityTypeId()}" : "$operation research_assigned {$entity->getEntityTypeId()}";

  // Only check access if the user has research_assigned permission.
  if (!$account->hasPermission($assigned_research_permission)) {
    return AccessResult::neutral()->addCacheTags($research_entity_cache_tags);
  }

  // Logic based on entity type.
  switch ($entity->getEntityTypeId()) {

    case 'quantity':
      // Get the log that references the quantity.
      $logs = \Drupal::entityTypeManager()->getStorage('log')->loadByProperties([
        'quantity' => $entity->id(),
      ]);

      // Bail if there are no logs.
      if (empty($logs)) {
        return AccessResult::neutral();
      }

      // Delegate to log access logic.
      return farm_rothamsted_experiment_research_research_entity_access(reset($logs), $operation, $account);

    case 'log':
      // Collect asset IDs the log references.
      $asset_ids = array_column($entity->get('asset')->getValue(), 'target_id');
      $location_ids = array_column($entity->get('location')->getValue(), 'target_id');
      $log_asset_ids = array_merge($asset_ids, $location_ids);

      // Bail if log does not reference any asset.
      if (empty($log_asset_ids)) {
        return AccessResult::forbidden();
      }

      // Find the plan associated with the asset.
      $query = \Drupal::entityQuery('plan')
        ->accessCheck(FALSE)
        ->condition('type', 'rothamsted_experiment')
        ->condition('experiment_design.entity:rothamsted_design.experiment.entity:rothamsted_experiment.researcher.entity:rothamsted_researcher.farm_user', $account->id());
      $asset_reference = $query->orConditionGroup()
        ->condition('plot', $log_asset_ids, 'IN')
        ->condition('asset', $log_asset_ids, 'IN');
      $query->condition($asset_reference);
      $plan_count = $query->count()->execute();
      return AccessResult::allowedIf($plan_count !== 0)->addCacheTags($research_entity_cache_tags);

    case 'asset':
      // Find the plan associated with the plot.
      $query = \Drupal::entityQuery('plan')
        ->accessCheck(FALSE)
        ->condition('type', 'rothamsted_experiment')
        ->condition('experiment_design.entity:rothamsted_design.experiment.entity:rothamsted_experiment.researcher.entity:rothamsted_researcher.farm_user', $account->id());
      $asset_reference = $query->orConditionGroup()
        ->condition('plot', $entity->id())
        ->condition('asset', $entity->id());
      $query->condition($asset_reference);
      $plan_count = $query->count()->execute();
      return AccessResult::allowedIf($plan_count !== 0)->addCacheTags($research_entity_cache_tags);

    case 'rothamsted_proposal':
      // For proposals check for contact, statistician or data steward.
      $query = \Drupal::entityQuery('rothamsted_proposal')
        ->accessCheck(FALSE)
        ->condition('id', $entity->id());
      $user_reference = $query->orConditionGroup()
        ->condition('contact.entity:rothamsted_researcher.farm_user', $account->id())
        ->condition('statistician.entity:rothamsted_researcher.farm_user', $account->id())
        ->condition('data_steward.entity:rothamsted_researcher.farm_user', $account->id());
      $query->condition($user_reference);
      $proposal_count = $query->count()->execute();
      return AccessResult::allowedIf($proposal_count !== 0)->addCacheTags($research_entity_cache_tags);

    case 'rothamsted_program':
      // For programs, check for a matching principal investigator.
      $program_count = \Drupal::entityQuery('rothamsted_program')
        ->accessCheck(FALSE)
        ->condition('id', $entity->id())
        ->condition('principal_investigator.entity:rothamsted_researcher.farm_user', $account->id())
        ->count()
        ->execute();
      return AccessResult::allowedIf($program_count !== 0)->addCacheTags($research_entity_cache_tags);

    case 'rothamsted_experiment':
      // For experiments, check for a matching researcher.
      $experiment_count = \Drupal::entityQuery('rothamsted_experiment')
        ->accessCheck(FALSE)
        ->condition('id', $entity->id())
        ->condition('researcher.entity:rothamsted_researcher.farm_user', $account->id())
        ->count()
        ->execute();
      return AccessResult::allowedIf($experiment_count !== 0)->addCacheTags($research_entity_cache_tags);

    case 'rothamsted_design':
      // For designs, check the experiment.
      $design_count = \Drupal::entityQuery('rothamsted_design')
        ->accessCheck(FALSE)
        ->condition('id', $entity->id())
        ->condition('experiment.entity:rothamsted_experiment.researcher.entity:rothamsted_researcher.farm_user', $account->id())
        ->count()
        ->execute();
      return AccessResult::allowedIf($design_count !== 0)->addCacheTags($research_entity_cache_tags);

    case 'plan':
      // For plans, check the design.
      $plan_count = \Drupal::entityQuery('plan')
        ->accessCheck(FALSE)
        ->condition('id', $entity->id())
        ->condition('experiment_design.entity:rothamsted_design.experiment.entity:rothamsted_experiment.researcher.entity:rothamsted_researcher.farm_user', $account->id())
        ->count()
        ->execute();
      return AccessResult::allowedIf($plan_count !== 0)->addCacheTags($research_entity_cache_tags);

    default:
      return AccessResult::neutral()->addCacheTags($research_entity_cache_tags);
  }

}

/**
 * Allowed values callback function for experiment category.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field storage definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the allowed values can be cached. Defaults to TRUE.
 *
 * @return array
 *   Returns an array of allowed values for use in form select options.
 */
function farm_rothamsted_experiment_research_experiment_category_field_allowed_values(FieldStorageDefinitionInterface $definition, ContentEntityInterface $entity = NULL, bool &$cacheable = TRUE) {
  return farm_rothamsted_experiment_research_experiment_category_options();
}

/**
 * Helper function to get experiment category allowed options.
 *
 * @return array
 *   The experiment category allowed options.
 */
function farm_rothamsted_experiment_research_experiment_category_options(): array {
  return [
    'reserve_site' => t('Reserve Site'),
    'annual_crop_experiment' => t('Annual Crop Experiment'),
    'crop_sequence_experiment' => t('Crop Sequence Experiment'),
    'classical_experiment' => t('Classical Experiment'),
    'energy_crop_experiment' => t('Energy Crop Experiment'),
    'genetically_modified_experiment' => t('Genetically Modified Experiment'),
    'genetically_edited_experiment' => t('Genetically Edited Experiment'),
    'longterm_experiment' => t('Longterm Experiment'),
    'seed_bulking_plots' => t('Seed Bulking Plots'),
    'other' => t('Other'),
  ];
}

/**
 * Allowed values callback function for the design blocking structure.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field storage definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the allowed values can be cached. Defaults to TRUE.
 *
 * @return array
 *   Returns an array of allowed values for use in form select options.
 */
function farm_rothamsted_experiment_research_statistical_design_field_allowed_values(FieldStorageDefinitionInterface $definition, ContentEntityInterface $entity = NULL, bool &$cacheable = TRUE) {
  return farm_rothamsted_experiment_research_statistical_design_options();
}

/**
 * Helper function to get statistical design allowed options.
 *
 * @param string|null $blocking_structure
 *   The blocking structure used to determine statistical design options.
 *
 * @return array
 *   The statistical design allowed options.
 */
function farm_rothamsted_experiment_research_statistical_design_options(string $blocking_structure = NULL): array {
  $all_options = [
    'crd' => [
      'crd' => t('Completely Randomised Design'),
    ],
    'rcbd' => [
      'rcbd' => t('Randomised Complete Block Design'),
    ],
    'rbd' => [
      'bibd' => t('Balanced Incomplete Block Design'),
      'ubd' => t('Unequal Block Design'),
      'ad' => t('Alpha Design'),
      'cd' => t('Cyclic Design'),
      'description' => t('Other (see description)'),
    ],
    'nrbd' => [
      'ibd' => t('Incomplete Block Design'),
      'ad' => t('Alpha Design'),
      'cd' => t('Cyclic Design'),
      'description' => t('Other (see description)'),
    ],
    'rrcd' => [
      'ls' => t('Latin Square'),
      'cls' => t('Complete Latin Square'),
      'qcls' => t('Quasi-Complete Latin Square'),
      'lsd' => t('Lattice Square Design'),
      'description' => t('Other (see description)'),
    ],
    'nrrcd' => [
      'description' => t('See Description'),
    ],
    'spd' => [
      'spd' => t('Split Plot Design'),
      'smpd' => t('Split Main Plots Design'),
      'sspd' => t('Split-split Plot Design'),
      'ccd' => t('Criss-cross (Strip Plot) Design'),
      'description' => t('Other (see description)'),
    ],
    'ad' => [
      'description' => t('See Description'),
    ],
    'nr' => [
      'description' => t('See Description'),
    ],
    'other' => [
      'description' => t('See Description'),
    ],
  ];

  // Return all options.
  if (empty($blocking_structure)) {
    return array_unique(array_merge(...array_values($all_options)));
  }

  // Else return specific options.
  return $all_options[$blocking_structure] ?? [];
}

/**
 * Implements hook_entity_insert().
 */
function farm_rothamsted_experiment_research_entity_insert(EntityInterface $entity) {

  // Only send emails for these entity types.
  $rothamsted_entity_type_ids = [
    'log',
    'comment',
    'plan',
    'rothamsted_design',
    'rothamsted_experiment',
    'rothamsted_program',
    'rothamsted_proposal',
    'rothamsted_researcher',
  ];
  $entity_type_id = $entity->getEntityTypeId();
  if (!in_array($entity_type_id, $rothamsted_entity_type_ids)) {
    return;
  }

  // Only send emails for comments about these entity types.
  if ($entity_type_id == 'comment' && !in_array($entity->bundle(), $rothamsted_entity_type_ids)) {
    return;
  }

  $highlight_fields = [
    'log' => [
      'name',
      'timestamp',
      'status',
      'owner',
      'location',
      'log_category',
    ],
    'rothamsted_proposal' => [
      'name',
      'program',
      'experiment',
      'design',
      'plan',
      'contact',
      'statistician',
      'data_steward',
    ],
    'rothamsted_program' => [
      'name',
      'abbreviation',
      'project_code',
      'principal_investigator',
      'start',
      'end',
    ],
    'rothamsted_experiment' => [
      'name',
      'program',
      'code',
      'description',
      'researcher',
      'start',
      'end',
    ],
    'rothamsted_design' => [
      'name',
      'experiment',
      'blocking_structure',
      'statistician',
    ],
    'rothamsted_researcher' => [
      'name',
      'job_title',
      'role',
      'organization',
      'department',
    ],
  ];

  // Build params.
  $params = [
    'highlight_fields' => $highlight_fields[$entity_type_id] ?? [],
  ];

  /** @var \Drupal\farm_rothamsted_experiment_research\ResearchNotificationHandler $notification_handler */
  $notification_handler = \Drupal::classResolver(ResearchNotificationHandler::class);

  // Add entity type logic.
  $operation = NULL;
  $emails = [];
  $include_admin = FALSE;
  switch ($entity_type_id) {
    case 'rothamsted_proposal':
    case 'rothamsted_program':
    case 'rothamsted_experiment':
    case 'rothamsted_design':
      $notification_handler->buildNewEntityAlert($entity);
      return;

    case 'plan':
      if ($entity->bundle() == 'rothamsted_experiment') {
        $notification_handler->buildNewEntityAlert($entity);
      }
      return;

    case 'comment':
      $operation = 'comment';

      // Send comment update to all proposal contacts.
      if ($entity->bundle() == 'rothamsted_proposal') {
        array_push($emails, ...farm_rothamsted_experiment_research_proposal_contacts($entity->getCommentedEntity()));
      }

      // Send comment update to authors of parent comments.
      $parent_count = 0;
      /** @var \Drupal\comment\Entity\Comment $comment */
      $comment = $entity;
      while ($comment->hasParentComment() && $parent_count < 5) {
        $parent_count++;
        $comment = $comment->getParentComment();
        if ($email = $comment->getAuthorEmail()) {
          $emails[] = $email;
        }
      }
      break;

    case 'log':
      $operation = 'experiment_management_record';
      $include_admin = FALSE;

      // Query plans that the log references (asset, location or plot).
      $asset_ids = array_column($entity->get('asset')->getValue(), 'target_id');
      $location_ids = array_column($entity->get('location')->getValue(), 'target_id');
      $all_asset_ids = array_merge($asset_ids, $location_ids);

      // Bail if the log does not reference any asset.
      if (empty($all_asset_ids)) {
        return;
      }

      $query = \Drupal::entityTypeManager()->getStorage('plan')->getQuery()
        ->accessCheck(TRUE)
        ->condition('type', 'rothamsted_experiment')
        ->condition('experiment_design.entity:rothamsted_design.experiment', NULL, 'IS NOT NULL');
      $or_group = $query->orConditionGroup()
        ->condition('plot.entity:asset', $all_asset_ids, 'IN')
        ->condition('asset.entity:asset', $all_asset_ids, 'IN')
        ->condition('location.entity:asset', $all_asset_ids, 'IN');
      $plan_ids = $query
        ->condition($or_group)
        ->execute();
      $plan_storage = \Drupal::entityTypeManager()->getStorage('plan');
      $plans = $plan_storage->loadMultiple($plan_ids);

      // Do not send email if there are no matching plans.
      if (empty($plans)) {
        return;
      }

      // Collect experiment emails for each plan.
      foreach ($plans as $plan) {

        // Get the design.
        $designs = $plan->get('experiment_design')->referencedEntities();
        if (empty($designs)) {
          continue;
        }

        // Get the experiment.
        $design = reset($designs);
        $experiments = $design->get('experiment')->referencedEntities();
        if (empty($experiments)) {
          continue;
        }

        // Check for matching researcher.
        $experiment = reset($experiments);
        $researcher_emails = array_map(function (RothamstedResearcherInterface $researcher) {
          return $researcher->getNotificationEmail();
        }, $experiment->get('researcher')->referencedEntities());
        array_push($emails, ...$researcher_emails);
      }
      break;
  }

  // Finally send the email.
  farm_rothamsted_notification_send_research_update($operation, $entity, $emails, $params, $include_admin);
}

/**
 * Implements hook_entity_update().
 */
function farm_rothamsted_experiment_research_entity_update(EntityInterface $entity) {

  // Only send emails for these entity types.
  $rothamsted_entity_type_ids = [
    'rothamsted_design',
    'rothamsted_experiment',
    'rothamsted_program',
    'rothamsted_proposal',
    'rothamsted_researcher',
  ];
  $entity_type_id = $entity->getEntityTypeId();
  if (!in_array($entity_type_id, $rothamsted_entity_type_ids)) {
    return;
  }

  // Send new entity alert emails to notify if new researchers were added.
  /** @var \Drupal\farm_rothamsted_experiment_research\ResearchNotificationHandler $notification_handler */
  $notification_handler = \Drupal::classResolver(ResearchNotificationHandler::class);
  $notification_handler->buildNewEntityAlert($entity, TRUE);

  // Include email logic.
  $emails = [];
  if ($entity_type_id === 'rothamsted_proposal') {
    $emails = farm_rothamsted_experiment_research_proposal_contacts($entity);
  }

  farm_rothamsted_notification_send_research_update('entity_update', $entity, $emails);
}

/**
 * Implements hook_entity_delete().
 */
function farm_rothamsted_experiment_research_entity_delete(EntityInterface $entity) {

  // Only send emails for these entity types.
  $rothamsted_entity_type_ids = [
    'rothamsted_design',
    'rothamsted_experiment',
    'rothamsted_program',
    'rothamsted_proposal',
    'rothamsted_researcher',
  ];
  $entity_type_id = $entity->getEntityTypeId();
  if (!in_array($entity_type_id, $rothamsted_entity_type_ids)) {
    return;
  }

  // Include email logic.
  $emails = [];
  if ($entity_type_id === 'rothamsted_proposal') {
    $emails = farm_rothamsted_experiment_research_proposal_contacts($entity);
  }

  farm_rothamsted_notification_send_research_update('entity_delete', $entity, $emails);
}

/**
 * Helper function to collect proposal contact emails.
 *
 * @param \Drupal\Core\Entity\EntityInterface $proposal
 *   The proposal entity.
 *
 * @return string[]
 *   Array of contact emails.
 */
function farm_rothamsted_experiment_research_proposal_contacts(EntityInterface $proposal): array {

  $notification_emails = [];
  $contact_fields = [
    'contact',
    'statistician',
    'data_steward',
  ];
  foreach ($contact_fields as $contact_field) {
    $emails = array_map(function (RothamstedResearcherInterface $researcher) {
      return $researcher->getNotificationEmail();
    }, $proposal->get($contact_field)->referencedEntities());
    array_push($notification_emails, ...$emails);
  }
  return array_unique(array_filter($notification_emails));
}

/**
 * Helper function for generating a standard comment base field definition.
 *
 * @param string $entity_type
 *   The entity type.
 *
 * @return \Drupal\Core\Field\BaseFieldDefinition
 *   Returns a comment base field definition.
 */
function farm_rothamsted_experiment_research_comment_base_field_definition(string $entity_type) {

  // Create a new comment field definition.
  // We use BundleFieldDefinition instead of BaseFieldDefinition to force Drupal
  // to create a separate database table for this field. Otherwise, if it is
  // added to the base table then the comment field default value is always 0
  // (CommentItemInterface::HIDDEN) instead of 2 (CommentItemInterface::OPEN),
  // because the Drupal\comment\Plugin\Field\FieldType\CommentItem::schema()
  // default is 0.

  // A default value must be set for comment fields.
  // Enable comments on entities by default.
  $default_value = [
    [
      'status' => CommentItemInterface::OPEN,
      'cid' => 0,
      'last_comment_timestamp' => 0,
      'last_comment_name' => '',
      'last_comment_uid' => 0,
      'comment_count' => 0,
    ],
  ];
  return BundleFieldDefinition::create('comment')
    ->setLabel(t('Comments'))
    // We assume that the comment type matches the entity type.
    ->setSetting('comment_type', $entity_type)
    ->setDefaultValue($default_value)
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'comment_default',
      'weight' => 1000,
    ])
    // Display comments on the bottom of entity view displays by default,
    // with the field label above them.
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayOptions('view', [
      'label' => 'above',
      'type' => 'comment_default',
      'weight' => 1000,
    ]);
}

/**
 * Implements hook_theme().
 */
function farm_rothamsted_experiment_research_theme($existing, $type, $theme, $path) {
  return [
    'comment__comment__rothamsted_proposal' => [
      'base hook' => 'comment',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function farm_rothamsted_experiment_research_preprocess_toolbar(&$variables) {
  $variables['#attached']['library'][] = 'farm_rothamsted_experiment_research/toolbar';
}
