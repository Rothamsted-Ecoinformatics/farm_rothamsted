<?php

/**
 * @file
 * Contains farm_rothamsted.module.
 */

use Drupal\asset\Entity\AssetInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\system\Entity\Action;

/**
 * Implements hook_farm_entity_bundle_field_info().
 */
function farm_rothamsted_farm_entity_bundle_field_info(EntityTypeInterface $entity_type, string $bundle) {
  $fields = [];

  // Add fields to input logs.
  if ($entity_type->id() === 'log' && $bundle === 'input') {

    // Add COSSH Hazard field.
    $options = [
      'type' => 'list_string',
      'label' => t('COSSH Hazard Assessments'),
      'description' => t('The COSHH assessments which need to be considered when handling fertilisers.'),
      'allowed_values_function' => 'farm_rothamsted_cossh_hazard_field_allowed_values',
      'multiple' => TRUE,
      'weight' => [
        'form' => -50,
        'view' => -50,
      ],
    ];
    $fields['cossh_hazard'] = \Drupal::service('farm_field.factory')->bundleFieldDefinition($options);

    // Add PPE field.
    $options = [
      'type' => 'list_string',
      'label' => t('PPE'),
      'description' => t('The protective clothing and equipment required for a specific job. Select all that apply to confirm they have been used.'),
      'allowed_values_function' => 'farm_rothamsted_ppe_field_allowed_values',
      'multiple' => TRUE,
      'weight' => [
        'form' => -50,
        'view' => -50,
      ],
    ];
    $fields['ppe'] = \Drupal::service('farm_field.factory')->bundleFieldDefinition($options);

  }

  return $fields;
}

/**
 * Implements hook_form_alter().
 */
function farm_rothamsted_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Bail if not the right form.
  if ($form_id != 'asset_plant_edit_form') {
    return;
  }

  // Ensure we can get the EntityForm object.
  $form_object = $form_state->getFormObject();
  if (!$form_object instanceof EntityFormInterface) {
    return;
  }

  // Load the assets current location.
  /** @var \Drupal\farm_location\AssetLocationInterface $asset_location */
  $asset_location = \Drupal::service('asset.location');
  $asset = $form_object->getEntity();
  $current_location = $asset_location->getLocation($asset);
  $current_location_string = array_map(function (AssetInterface $location) {
    return $location->label();
  }, $current_location);

  // Add a wrapper for the current location fields.
  $form['rothamsted_current_location_wrapper'] = [
    '#type' => 'container',
    '#attributes' => [
      'style' => ['display: flex; flex-wrap: wrap; column-gap: 2em; align-items: center;'],
    ],
    '#weight' => $form['name']['#weight'] + 1,
  ];

  // Add disabled textfield displaying the current location.
  $form['rothamsted_current_location_wrapper']['rothamsted_current_location'] = [
    '#type' => 'textfield',
    '#title' => t('Current location'),
    '#description' => t('The current location of the asset. This can be changed by creating a new movement log with the "Move asset" button.'),
    '#disabled' => TRUE,
    '#default_value' => $current_location_string,
  ];

  // Include the latest movement log in the field description.
  if ($latest_log = $asset_location->getMovementLog($asset)) {
    $form['rothamsted_current_location_wrapper']['rothamsted_current_location']['#description'] .= ' ' . t('Latest movement log: <a href=":uri">%log_label</a>', [':uri' => $latest_log->toUrl()->toString(), '%log_label' => $latest_log->label()]);
  }

  // Add button to move the asset.
  $form['rothamsted_current_location_wrapper']['rothamsted_current_location_move'] = [
    '#type' => 'submit',
    '#value' => t('Move asset'),
    '#submit' => ['farm_rothamsted_asset_form_move_submit'],
  ];

}

/**
 * Submit function for the current location form field.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function farm_rothamsted_asset_form_move_submit(array &$form, FormStateInterface $form_state) {

  // Get the asset.
  /** @var \Drupal\asset\Entity\AssetInterface $asset */
  $asset = $form_state->getFormObject()->getEntity();
  if (empty($asset)) {
    return;
  }

  // Load the asset move action.
  $move_action = Action::load('asset_move_action');
  $move_action->execute([$asset]);

  // Redirect to the action confirm form route and set the destination
  // to come back to the asset canonical page.
  $operation_definition = $move_action->getPluginDefinition();
  if (!empty($operation_definition['confirm_form_route_name'])) {
    $options = [
      'query' => ['destination' => $asset->toUrl()->toString()],
    ];
    $form_state->setRedirect($operation_definition['confirm_form_route_name'], [], $options);
  }
}

/**
 * Defines the cossh hazard assessments options.
 *
 * @return array
 *   The cossh hazard options.
 */
function farm_rothamsted_cossh_hazard_options() {
  return [
    'explosive' => t('Explosive'),
    'oxidising' => t('Oxidising'),
    'flammable' => t('Flammable'),
    'highly_flammable' => t('Highly Flammable'),
    'extremely_flammable' => t('Extremely Flammable'),
    'harmful' => t('Harmful'),
    'irritant' => t('Irritant'),
    'corrosive' => t('Corrosive'),
    'toxic' => t('Toxic'),
    'danger_to_environment' => t('Danger to Environment'),
    'carcinogenic' => t('Carcinogenic'),
    'mutagenic' => t('Mutagenic'),
    'toxic_for_reproduction' => t('Toxic for Reproduction'),
    'sensitising' => t('Sensitising'),
    'none' => t('None'),
  ];
}

/**
 * Defines the ppe options.
 *
 * @return array
 *   The ppe options.
 */
function farm_rothamsted_ppe_options() {
  return [
    'face_shield' => t('Face Shield'),
    'coveralls' => t('Coveralls'),
    'gloves' => t('Gloves'),
    'apron' => t('Apron'),
  ];
}

/**
 * Allowed values callback function for the ppe field.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field storage definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the allowed values can be cached. Defaults to TRUE.
 *
 * @return array
 *   Returns an array of allowed values for use in form select options.
 */
function farm_rothamsted_ppe_field_allowed_values(FieldStorageDefinitionInterface $definition, ContentEntityInterface $entity = NULL, bool &$cacheable = TRUE) {
  return farm_rothamsted_ppe_options();
}

/**
 * Allowed values callback function for the cossh hazards field.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field storage definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the allowed values can be cached. Defaults to TRUE.
 *
 * @return array
 *   Returns an array of allowed values for use in form select options.
 */
function farm_rothamsted_cossh_hazard_field_allowed_values(FieldStorageDefinitionInterface $definition, ContentEntityInterface $entity = NULL, bool &$cacheable = TRUE) {
  return farm_rothamsted_cossh_hazard_options();
}
